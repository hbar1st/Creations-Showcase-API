// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider     = "prisma-client-js"
  output       = "../src/generated/prisma"
  moduleFormat = "cjs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int    @id @default(autoincrement())
  email     String @unique @db.VarChar(254)
  firstname String @db.VarChar(25)
  lastname  String @db.VarChar(50)
  nickname  String @db.VarChar(25)
  password  String @db.VarChar(255)

  comments  Comment[]
  projects  Project[]

  @@map(name: "users")
  @@unique([id, email])
}

model Project {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  title     String    @db.VarChar(100)
  descr     String
  live_link String? 
  repo_link String?
  keywords  String?   @db.VarChar(100)
  published DateTime? 
  images    Image[]
  comments  Comment[]

  @@map(name: "projects")
  @@unique([id, userId])
}

model Image {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(100)
  public_id Int     @unique
  type      String  @db.VarChar(50)
  url       String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  @@map(name: "project_images")
  @@unique([name, projectId])
}

model Comment {
  id        Int     @id @default(autoincrement())
  content   String? @db.VarChar(400)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@map(name: "comments")
  @@unique([projectId, userId])
  @@unique([id, projectId, userId])
}